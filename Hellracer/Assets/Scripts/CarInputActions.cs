//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CarInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInputActions"",
    ""maps"": [
        {
            ""name"": ""CarController"",
            ""id"": ""090f0f7d-475d-4081-a007-ce139014254d"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""538db5b7-58bf-494b-94c8-7de755ad70ce"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""e6eda2c3-8a98-4063-8183-2b37ed341ad2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""e6bda9a8-62b7-4a80-bb50-fb8c63adf3e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Value"",
                    ""id"": ""dbac2e98-6a4e-45d7-ba66-93fdabbe16b7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""693efe72-e429-4412-9987-a41e170b1152"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b3ad4250-c079-4814-bc71-d727fe1715f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d2a5832c-7d79-402b-98f2-1f23ac7efebc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dc33cc93-e1f7-4d9f-a0ef-285273a9e025"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffa9f1da-9053-4de4-b1de-7a0fd338fbe6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d695884-df8c-4471-9f9b-309ebf5f884b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bd6033b-8bdc-46bb-bff5-d3191a39eaec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fc0af97-ca36-4ff0-b8a9-0ea26ce6d191"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76941ba4-d0fc-461a-a87d-cbcc990bbe5a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67a7df01-048d-4a42-8067-41c6eb665ae8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarController
        m_CarController = asset.FindActionMap("CarController", throwIfNotFound: true);
        m_CarController_Accelerate = m_CarController.FindAction("Accelerate", throwIfNotFound: true);
        m_CarController_Steering = m_CarController.FindAction("Steering", throwIfNotFound: true);
        m_CarController_Brake = m_CarController.FindAction("Brake", throwIfNotFound: true);
        m_CarController_Reverse = m_CarController.FindAction("Reverse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarController
    private readonly InputActionMap m_CarController;
    private ICarControllerActions m_CarControllerActionsCallbackInterface;
    private readonly InputAction m_CarController_Accelerate;
    private readonly InputAction m_CarController_Steering;
    private readonly InputAction m_CarController_Brake;
    private readonly InputAction m_CarController_Reverse;
    public struct CarControllerActions
    {
        private @CarInputActions m_Wrapper;
        public CarControllerActions(@CarInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_CarController_Accelerate;
        public InputAction @Steering => m_Wrapper.m_CarController_Steering;
        public InputAction @Brake => m_Wrapper.m_CarController_Brake;
        public InputAction @Reverse => m_Wrapper.m_CarController_Reverse;
        public InputActionMap Get() { return m_Wrapper.m_CarController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarControllerActions set) { return set.Get(); }
        public void SetCallbacks(ICarControllerActions instance)
        {
            if (m_Wrapper.m_CarControllerActionsCallbackInterface != null)
            {
                @Accelerate.started -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnAccelerate;
                @Steering.started -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnSteering;
                @Brake.started -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnBrake;
                @Reverse.started -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnReverse;
                @Reverse.performed -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnReverse;
                @Reverse.canceled -= m_Wrapper.m_CarControllerActionsCallbackInterface.OnReverse;
            }
            m_Wrapper.m_CarControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Reverse.started += instance.OnReverse;
                @Reverse.performed += instance.OnReverse;
                @Reverse.canceled += instance.OnReverse;
            }
        }
    }
    public CarControllerActions @CarController => new CarControllerActions(this);
    public interface ICarControllerActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnReverse(InputAction.CallbackContext context);
    }
}
